package fr.iutvalence.hectorbarneoudfarisboulakhsoumi.othello;

/* We make the Grid class, in order to describe the attributs and methods. */
public class Grid {
	/*  Constant for the Side size grid. */
	private static final int SIDE_SIZE = 8;
	/*  Set case table as attribut to the Grid. The grids could be composed of black or white pawn or nothing */
	private final Case[][] cases;
	public int CASE_AVAILABLE_NUMBER;
	/* This is the constructor for the Grid. */
	public Grid()
	{
		this.createGrid();
		this.initGrid();
	}
	
	private void createGrid()
	{
		CASE_AVAILABLE_NUMBER = 64;
		cases = new Case[SIDE_SIZE][SIDE_SIZE];
	
	}
		
	public Pawn getPawn(Position position)
	{
		return this.cases[position.getLineNumber()][position.getRowNulber()].getPawn();
	}
	
	{
		return this.cases[position.getLineNumber()][position.getRowNumber]
	}

	private void putPawn(Position position, Pawn pawn)
	{
	this.putPawn(new Position(position.LineNumber, position.RowNumber), new Case(paw.num)) 	
	}
	
	
	public VerifCases() throws NoCasesAvailable; // if no available case
	{
		if(CASE_AVAILABLE_NUMBER == 0) throw new NoCasesAvailable();
		
	}
	
	public void VerifCoup(Position position, Pawn pawn) throws InvalidPlacement();
	{
		if(getPawn(Case-1) != null | getPawn(this.position+1) != null)
		{
		if(getPawn(this.position) == null)
		{
			putPawn(this.position, this.pawn);
		}
		}
	}
	
	
	
			// TODO RÃ©percuter le coup.
			
		
	}
	
	@Override
	public String toString() {
		// TODO
		return super.toString();
	}
	
	private void initGrid(){
		for(int i = 0; i < SIDE_SIZE; i++) {
			for (int j = 0; j < SIDE_SIZE; j++) {
				cases[i][j] = new Case(new Position(i,j));
			}
		}
	}
	
}
